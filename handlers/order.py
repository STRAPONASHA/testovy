"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.repository import OrderRepository, CartRepository, ProductRepository, UserRepository
from database.models import Order, OrderItem, User
import config

logger = logging.getLogger(__name__)
router = Router()

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
order_repo = OrderRepository()
cart_repo = CartRepository()
product_repo = ProductRepository()
user_repo = UserRepository()


class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    waiting_name = State()
    waiting_phone = State()
    waiting_address = State()
    waiting_delivery_method = State()
    waiting_delivery_time = State()
    waiting_payment_method = State()
    waiting_comment = State()
    confirming_order = State()


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        cart_items = await cart_repo.get_cart_items(user_id)
        if not cart_items:
            await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(user_id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∏–º—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if user and user.first_name:
            await state.update_data(name=user.first_name)
            await ask_phone(callback, state)
        else:
            await callback.message.edit_text(
                "üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
                ])
            )
            await state.set_state(OrderStates.waiting_name)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.message(OrderStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è"""
    try:
        name = message.text.strip()
        if len(name) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(name=name)
        await ask_phone(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def ask_phone(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        user_id = callback_or_message.from_user.id
        user = await user_repo.get_user(user_id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥—Ä–µ—Å—É
        if user and user.phone:
            await state.update_data(phone=user.phone)
            await ask_address(callback_or_message, state)
        else:
            text = "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
            ])
            
            if isinstance(callback_or_message, CallbackQuery):
                await callback_or_message.message.edit_text(text, reply_markup=keyboard)
            else:
                await callback_or_message.answer(text, reply_markup=keyboard)
            
            await state.set_state(OrderStates.waiting_phone)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")


@router.message(OrderStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"""
    try:
        phone = message.text.strip()
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10 or not phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '').isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(phone=phone)
        await finish_order(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def ask_address(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        user_id = callback_or_message.from_user.id
        user = await user_repo.get_user(user_id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–¥—Ä–µ—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏
        if user and user.address:
            await state.update_data(address=user.address)
            await ask_delivery_method(callback_or_message, state)
        else:
            text = "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
            ])
            
            if isinstance(callback_or_message, CallbackQuery):
                await callback_or_message.message.edit_text(text, reply_markup=keyboard)
            else:
                await callback_or_message.answer(text, reply_markup=keyboard)
            
            await state.set_state(OrderStates.waiting_address)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥—Ä–µ—Å–∞: {e}")


@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    try:
        address = message.text.strip()
        if len(address) < 10:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(address=address)
        await ask_delivery_method(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def ask_delivery_method(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        text = "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞ (+200‚ÇΩ)", callback_data="delivery_delivery")],
            [InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_pickup")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback_or_message.answer(text, reply_markup=keyboard)
        
        await state.set_state(OrderStates.waiting_delivery_method)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")


@router.callback_query(F.data.startswith("delivery_"))
async def process_delivery_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        delivery_method = callback.data.split("_")[1]
        await state.update_data(delivery_method=delivery_method)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        await ask_delivery_time(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def ask_delivery_time(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        data = await state.get_data()
        delivery_method = data.get('delivery_method', 'delivery')
        
        if delivery_method == 'pickup':
            text = "üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:"
        else:
            text = "üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üåÖ 9:00-12:00", callback_data="time_morning"),
                InlineKeyboardButton(text="‚òÄÔ∏è 12:00-15:00", callback_data="time_afternoon")
            ],
            [
                InlineKeyboardButton(text="üåá 15:00-18:00", callback_data="time_evening"),
                InlineKeyboardButton(text="üåÉ 18:00-21:00", callback_data="time_night")
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback_or_message.answer(text, reply_markup=keyboard)
        
        await state.set_state(OrderStates.waiting_delivery_time)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")


@router.callback_query(F.data.startswith("time_"))
async def process_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        time_slot = callback.data.split("_")[1]
        time_mapping = {
            'morning': '9:00-12:00',
            'afternoon': '12:00-15:00',
            'evening': '15:00-18:00',
            'night': '18:00-21:00'
        }
        
        await state.update_data(delivery_time=time_mapping.get(time_slot, '9:00-12:00'))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await ask_payment_method(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def ask_payment_method(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    try:
        text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω", callback_data="payment_card")],
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="payment_cash")],
            [InlineKeyboardButton(text="üì± –°–ë–ü/QR-–∫–æ–¥", callback_data="payment_qr")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback_or_message.answer(text, reply_markup=keyboard)
        
        await state.set_state(OrderStates.waiting_payment_method)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")


@router.callback_query(F.data.startswith("payment_"))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    try:
        payment_method = callback.data.split("_")[1]
        payment_mapping = {
            'card': '–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω',
            'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏',
            'qr': '–°–ë–ü/QR-–∫–æ–¥'
        }
        
        await state.update_data(payment_method=payment_mapping.get(payment_method, '–ù–∞–ª–∏—á–Ω—ã–º–∏'))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        await ask_comment(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def ask_comment(callback_or_message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"""
    try:
        text = "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="comment_skip")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback_or_message.answer(text, reply_markup=keyboard)
        
        await state.set_state(OrderStates.waiting_comment)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")


@router.callback_query(F.data == "comment_skip")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    try:
        await state.update_data(comment="")
        await confirm_order(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(OrderStates.waiting_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    try:
        comment = message.text.strip()
        await state.update_data(comment=comment)
        await confirm_order(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def confirm_order(callback_or_message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
    try:
        user_id = callback_or_message.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await cart_repo.get_cart_items(user_id)
        
        if not cart_items:
            await callback_or_message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await state.clear()
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = 0
        order_text = f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        order_text += f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        order_text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        order_text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
        order_text += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {config.DELIVERY_METHODS[data['delivery_method']]}\n"
        order_text += f"üïê <b>–í—Ä–µ–º—è:</b> {data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        order_text += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {data.get('payment_method', '–ù–∞–ª–∏—á–Ω—ã–º–∏')}\n"
        
        if data.get('comment'):
            order_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}\n"
        
        order_text += f"\nüì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        
        for item in cart_items:
            product = await product_repo.get_product(item.product_id)
            if product:
                item_total = product.price * item.quantity
                total_amount += item_total
                order_text += f"‚Ä¢ {product.name} x{item.quantity} = {item_total}{config.CURRENCY}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        if data['delivery_method'] == 'delivery':
            total_amount += 200
        
        order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_amount}{config.CURRENCY}</b>"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(
                order_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback_or_message.answer(
                order_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await state.set_state(OrderStates.confirming_order)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")


@router.callback_query(F.data == "confirm_order")
async def process_order_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = callback.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await cart_repo.get_cart_items(user_id)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = 0
        order_items = []
        
        for item in cart_items:
            product = await product_repo.get_product(item.product_id)
            if product:
                item_total = product.price * item.quantity
                total_amount += item_total
                order_items.append(OrderItem(
                    id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                    order_id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                    product_id=product.id,
                    quantity=item.quantity,
                    price=product.price
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        if data['delivery_method'] == 'delivery':
            total_amount += 200
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            user_id=user_id,
            status='pending',
            total_amount=total_amount,
            delivery_method=data['delivery_method'],
            delivery_address=data['address'],
            phone=data['phone'],
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        created_order = await order_repo.create_order(order, order_items)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(user_id)
        if user:
            user.first_name = data['name']
            user.phone = data['phone']
            user.address = data['address']
            await user_repo.update_user(user)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await cart_repo.clear_cart(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{created_order.id}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {total_amount}{config.CURRENCY}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="go_to_catalog")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
        )
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
                [
                    InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="go_to_catalog"),
                    InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
                ]
            ])
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")


async def finish_order(callback_or_message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        user_id = callback_or_message.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await cart_repo.get_cart_items(user_id)
        
        if not cart_items:
            await callback_or_message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await state.clear()
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = 0
        order_text = f"üìã <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        order_text += f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        order_text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n\n"
        order_text += f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        
        for item in cart_items:
            product = await product_repo.get_product(item.product_id)
            if product:
                item_total = product.price * item.quantity
                total_amount += item_total
                order_text += f"‚Ä¢ {product.name} x{item.quantity} = {item_total}{config.CURRENCY}\n"
        
        order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_amount}{config.CURRENCY}</b>\n\n"
        order_text += f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</b>\n"
        order_text += f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
        order_text += f"üõçÔ∏è <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order = Order(
            id=0,
            user_id=user_id,
            status='pending',
            total_amount=total_amount,
            delivery_method='delivery',
            delivery_address='–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω',
            phone=data['phone'],
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        order_items = []
        for item in cart_items:
            product = await product_repo.get_product(item.product_id)
            if product:
                order_items.append(OrderItem(
                    id=0,
                    order_id=0,
                    product_id=product.id,
                    quantity=item.quantity,
                    price=product.price
                ))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        created_order = await order_repo.create_order(order, order_items)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_user(user_id)
        if user:
            user.first_name = data['name']
            user.phone = data['phone']
            await user_repo.update_user(user)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await cart_repo.clear_cart(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="go_to_catalog")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
        ])
        
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.edit_text(
                order_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback_or_message.answer(
                order_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await state.clear()
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        else:
            await callback_or_message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


@router.message(Command("orders"))
async def show_user_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        orders = await order_repo.get_orders(user_id)
        
        if not orders:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="go_to_catalog")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
            
            if hasattr(message, 'edit_text'):
                await message.edit_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)
            else:
                await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)
            return
        
        text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in orders:
            status_text = config.ORDER_STATUSES.get(order.status, order.status)
            text += f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
            text += f"üí∞ –°—É–º–º–∞: {order.total_amount}{config.CURRENCY}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            text += f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="go_to_catalog")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
        ])
        
        if hasattr(message, 'edit_text'):
            await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        if hasattr(message, 'edit_text'):
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
