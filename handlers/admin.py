"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.repository import ProductRepository, OrderRepository, UserRepository
from database.models import Product, Category
import config

logger = logging.getLogger(__name__)
router = Router()

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
product_repo = ProductRepository()
order_repo = OrderRepository()
user_repo = UserRepository()


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    adding_product_name = State()
    adding_product_description = State()
    adding_product_price = State()
    adding_product_category = State()
    adding_product_stock = State()
    adding_product_image = State()
    editing_product = State()
    editing_product_field = State()
    editing_product_value = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS


# –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –≤—Å–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_edit_products")],
            [InlineKeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
        ])
        
        await message.answer(
            "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@router.callback_query(F.data == "admin_edit_products")
async def show_products_for_edit(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = await product_repo.get_products()
        
        if not products:
            await callback.message.edit_text(
                "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            return
        
        text = "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        
        keyboard_buttons = []
        for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
            text += f"üÜî {product.id} - {product.name} ({product.price}{config.CURRENCY})\n"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {product.name[:20]}...",
                    callback_data=f"edit_product_{product.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_add_product")
async def start_adding_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
        )
        
        await state.set_state(AdminStates.adding_product_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.adding_product_name)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        name = message.text.strip()
        if len(name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(name=name)
        
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
            ])
        )
        
        await state.set_state(AdminStates.adding_product_description)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


@router.message(AdminStates.adding_product_description)
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        description = message.text.strip()
        if len(description) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(description=description)
        
        await message.answer(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
            ])
        )
        
        await state.set_state(AdminStates.adding_product_price)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


@router.message(AdminStates.adding_product_price)
async def process_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            price = float(message.text.strip())
            if price <= 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(price=price)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await product_repo.get_categories()
        
        if not categories:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard_buttons = []
        for category in categories:
            keyboard_buttons.append([
                InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")
            ])
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(AdminStates.adding_product_category)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


@router.callback_query(AdminStates.adding_product_category, F.data.startswith("category_"))
async def process_product_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        category_id = int(callback.data.split("_")[1])
        await state.update_data(category_id=category_id)
        
        await callback.message.edit_text(
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
            ])
        )
        
        await state.set_state(AdminStates.adding_product_stock)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.adding_product_stock)
async def process_product_stock(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            stock = int(message.text.strip())
            if stock < 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(stock=stock)
        
        await message.answer(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
            ])
        )
        
        await state.set_state(AdminStates.adding_product_image)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


@router.message(AdminStates.adding_product_image)
async def process_product_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        image_url = None
        
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            image_url = message.photo[-1].file_id
        elif message.text and message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return
        
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = Product(
            id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            name=data['name'],
            description=data['description'],
            price=data['price'],
            category_id=data['category_id'],
            image_url=image_url,
            stock=data['stock'],
            is_active=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
        created_product = await product_repo.add_product(product)
        
        await message.answer(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {created_product.name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {created_product.price}{config.CURRENCY}\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {created_product.stock} —à—Ç.\n"
            f"üÜî <b>ID:</b> {created_product.id}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")


@router.callback_query(F.data == "admin_orders")
async def show_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        orders = await order_repo.get_orders()
        
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                    [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
                ])
            )
            return
        
        text = "üìã <b>–ó–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤
            status_text = config.ORDER_STATUSES.get(order.status, order.status)
            text += f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
            text += f"üí∞ –°—É–º–º–∞: {order.total_amount}{config.CURRENCY}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            moscow_time = order.created_at.astimezone(config.MOSCOW_TZ)
            text += f"üìÖ –î–∞—Ç–∞: {moscow_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        keyboard_buttons = []
        for order in orders[:5]:  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–∫–∞–∑–æ–≤
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üì¶ #{order.id}",
                    callback_data=f"order_details_{order.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        order_id = int(callback.data.split("_")[2])
        orders = await order_repo.get_orders()
        order = next((o for o in orders if o.id == order_id), None)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        order_items = await order_repo.get_order_items(order_id)
        
        text = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
        text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {order.user_id}\n"
        text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n"
        text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {order.delivery_address}\n"
        text += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {config.DELIVERY_METHODS.get(order.delivery_method, order.delivery_method)}\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {config.ORDER_STATUSES.get(order.status, order.status)}\n"
        moscow_time = order.created_at.astimezone(config.MOSCOW_TZ)
        text += f"üìÖ <b>–î–∞—Ç–∞:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        text += f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item in order_items:
            product = await product_repo.get_product(item.product_id)
            if product:
                text += f"‚Ä¢ {product.name} x{item.quantity} = {item.price * item.quantity}{config.CURRENCY}\n"
        
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {order.total_amount}{config.CURRENCY}</b>"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard_buttons = []
        for status_key, status_name in config.ORDER_STATUSES.items():
            if status_key != order.status:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìä {status_name}",
                        callback_data=f"change_status_{order_id}_{status_key}"
                    )
                ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="admin_orders"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        parts = callback.data.split("_")
        order_id = int(parts[2])
        new_status = parts[3]
        
        await order_repo.update_order_status(order_id, new_status)
        
        status_name = config.ORDER_STATUSES.get(new_status, new_status)
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_order_details(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_cancel")
async def admin_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_edit_products")],
            [InlineKeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
        ])
        
        await callback.message.edit_text(
            "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("edit_product_"))
async def edit_product_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        product_id = int(callback.data.split("_")[2])
        product = await product_repo.get_product(product_id)
        
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.update_data(editing_product_id=product_id)
        
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        text += f"üÜî <b>ID:</b> {product.id}\n"
        text += f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price}{config.CURRENCY}\n"
        text += f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product.stock} —à—Ç.\n\n"
        text += f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
            [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
            [InlineKeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_field_stock")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("edit_field_"))
async def edit_field_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        field = callback.data.split("_")[2]  # name, description, price, stock
        
        field_names = {
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", 
            "price": "—Ü–µ–Ω—É",
            "stock": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        }
        
        await state.update_data(editing_field=field)
        
        text = f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:"
        
        if field == "price":
            text += "\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        elif field == "stock":
            text += "\n\nüì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(AdminStates.editing_product_value)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.editing_product_value)
async def process_edit_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    try:
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        data = await state.get_data()
        product_id = data['editing_product_id']
        field = data['editing_field']
        new_value = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "price":
            try:
                new_value = float(new_value)
                if new_value <= 0:
                    await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        elif field == "stock":
            try:
                new_value = int(new_value)
                if new_value < 0:
                    await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        elif field in ["name", "description"]:
            if len(new_value) < 3:
                await message.answer("‚ùå –ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        product = await product_repo.get_product(product_id)
        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        updated_product = Product(
            id=product.id,
            name=new_value if field == "name" else product.name,
            description=new_value if field == "description" else product.description,
            price=new_value if field == "price" else product.price,
            category_id=product.category_id,
            image_url=product.image_url,
            stock=new_value if field == "stock" else product.stock,
            is_active=product.is_active
        )
        
        await product_repo.update_product(updated_product)
        
        field_names = {
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
            "price": "—Ü–µ–Ω–∞", 
            "stock": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        }
        
        await message.answer(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
            f"üì¶ <b>ID:</b> {product_id}\n"
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {field_names[field]}\n"
            f"üÜï <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {new_value}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"edit_product_{product_id}")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")


@router.callback_query(F.data.startswith("change_order_status_"))
async def change_order_status_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        order_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        orders = await order_repo.get_orders()
        order = next((o for o in orders if o.id == order_id), None)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n\n"
        text += f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {config.ORDER_STATUSES.get(order.status, order.status)}\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
        
        keyboard_buttons = []
        for status_key, status_name in config.ORDER_STATUSES.items():
            if status_key != order.status:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìä {status_name}",
                        callback_data=f"set_status_{order_id}_{status_key}"
                    )
                ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        parts = callback.data.split("_")
        order_id = int(parts[2])
        new_status = parts[3]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await order_repo.update_order_status(order_id, new_status)
        
        status_name = config.ORDER_STATUSES.get(new_status, new_status)
        
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status_name}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
        await orders_command(callback.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
