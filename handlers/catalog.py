"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.repository import ProductRepository, UserRepository
from database.models import User
import config

logger = logging.getLogger(__name__)
router = Router()

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
product_repo = ProductRepository()
user_repo = UserRepository()


class CatalogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    viewing_categories = State()
    viewing_products = State()
    viewing_product = State()


@router.message(Command("catalog"))
async def show_catalog(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        await user_repo.create_user(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await product_repo.get_categories()
        
        if not categories:
            await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard_buttons = [
            [InlineKeyboardButton(text=f"üìÇ {category.name}", callback_data=f"category_{category.id}")]
            for category in categories
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—é"
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(message, 'edit_text'):
            # –≠—Ç–æ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                f"üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SHOP_NAME}!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=keyboard
            )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(
                f"üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SHOP_NAME}!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=keyboard
            )
        
        await state.set_state(CatalogStates.viewing_categories)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        if hasattr(message, 'edit_text'):
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("category_"))
async def show_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_id = int(callback.data.split("_")[1])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º category_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await state.update_data(category_id=category_id)
        products = await product_repo.get_products_by_category(category_id)
        
        if not products:
            await callback.message.edit_text(
                "üì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard_buttons = []
        for product in products:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{product.name} - {product.price}{config.CURRENCY}",
                    callback_data=f"product_{product.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
        
        await state.set_state(CatalogStates.viewing_products)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        product_id = int(callback.data.split("_")[1])
        product = await product_repo.get_product(product_id)
        
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        text = f"""
üõçÔ∏è <b>{product.name}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{product.description}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if product.detailed_description:
            text += f"\nüìã <b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{product.detailed_description}"
        
        if product.brand:
            text += f"\nüè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> {product.brand}"
        
        if product.material:
            text += f"\nüßµ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {product.material}"
        
        if product.country:
            text += f"\nüåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {product.country}"
        
        if product.weight:
            text += f"\n‚öñÔ∏è <b>–í–µ—Å:</b> {product.weight}"
        
        if product.dimensions:
            text += f"\nüìè <b>–†–∞–∑–º–µ—Ä—ã:</b> {product.dimensions}"
        
        text += f"\n\nüí∞ <b>–¶–µ–Ω–∞:</b> {product.price}{config.CURRENCY}"
        text += f"\nüì¶ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {product.stock} —à—Ç."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        if product.sizes:
            sizes = [size.strip() for size in product.sizes.split(',')]
            if len(sizes) <= 4:  # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                size_buttons = [
                    InlineKeyboardButton(text=f"üìè {size}", callback_data=f"select_size_{product.id}_{size}")
                    for size in sizes
                ]
                keyboard_buttons.append(size_buttons)
            else:  # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
                for i in range(0, len(sizes), 2):
                    row = [
                        InlineKeyboardButton(text=f"üìè {sizes[i]}", callback_data=f"select_size_{product.id}_{sizes[i]}")
                    ]
                    if i + 1 < len(sizes):
                        row.append(InlineKeyboardButton(text=f"üìè {sizes[i+1]}", callback_data=f"select_size_{product.id}_{sizes[i+1]}"))
                    keyboard_buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        if product.colors:
            colors = [color.strip() for color in product.colors.split(',')]
            if len(colors) <= 4:  # –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                color_buttons = [
                    InlineKeyboardButton(text=f"üé® {color}", callback_data=f"select_color_{product.id}_{color}")
                    for color in colors
                ]
                keyboard_buttons.append(color_buttons)
            else:  # –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
                for i in range(0, len(colors), 2):
                    row = [
                        InlineKeyboardButton(text=f"üé® {colors[i]}", callback_data=f"select_color_{product.id}_{colors[i]}")
                    ]
                    if i + 1 < len(colors):
                        row.append(InlineKeyboardButton(text=f"üé® {colors[i+1]}", callback_data=f"select_color_{product.id}_{colors[i+1]}"))
                    keyboard_buttons.append(row)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.extend([
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product.id}"),
                InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products"),
                InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(CatalogStates.viewing_product)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞", show_alert=True)


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        categories = await product_repo.get_categories()
        
        keyboard_buttons = [
            [InlineKeyboardButton(text=f"üìÇ {category.name}", callback_data=f"category_{category.id}")]
            for category in categories
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—é"
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üõçÔ∏è {config.SHOP_NAME}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=keyboard
        )
        
        await state.set_state(CatalogStates.viewing_categories)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_products")
async def back_to_products(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π category_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        category_id = data.get('category_id')
        
        if not category_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
            return
            
        products = await product_repo.get_products_by_category(category_id)
        
        keyboard_buttons = []
        for product in products:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{product.name} - {product.price}{config.CURRENCY}",
                    callback_data=f"product_{product.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_to_main_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
        
        await state.set_state(CatalogStates.viewing_products)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
